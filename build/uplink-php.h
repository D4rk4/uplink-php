#pragma once

// Copyright (C) 2020 Storj Labs, Inc.
// See LICENSE for copying information.

#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

typedef struct Handle {
    size_t _handle;
} Handle;

typedef struct Access {
    size_t _handle;
} Access;
typedef struct Project {
    size_t _handle;
} Project;
typedef struct Download {
    size_t _handle;
} Download;
typedef struct Upload {
    size_t _handle;
} Upload;

typedef struct Config {
    char *user_agent;

    int32_t dial_timeout_milliseconds;

    // temp_directory specifies where to save data during downloads to use less memory.
    char *temp_directory;
} Config;

typedef struct Bucket {
    char *name;
    int64_t created;
} Bucket;

typedef struct SystemMetadata {
    int64_t created;
    int64_t expires;
    int64_t content_length;
} SystemMetadata;

typedef struct CustomMetadataEntry {
    char *key;
    size_t key_length;

    char *value;
    size_t value_length;
} CustomMetadataEntry;

typedef struct CustomMetadata {
    CustomMetadataEntry *entries;
    size_t count;
} CustomMetadata;

typedef struct Object {
    char *key;
    bool is_prefix;
    SystemMetadata system;
    CustomMetadata custom;
} Object;

typedef struct UploadOptions {
    // When expires is 0 or negative, it means no expiration.
    int64_t expires;
} UploadOptions;

typedef struct DownloadOptions {
    int64_t offset;
    // When length is negative, it will read until the end of the blob.
    int64_t length;
} DownloadOptions;

typedef struct ListObjectsOptions {
    char *prefix;
    char *cursor;
    bool recursive;

    bool system;
    bool custom;
} ListObjectsOptions;

typedef struct ListBucketsOptions {
    char *cursor;
} ListBucketsOptions;

typedef struct ObjectIterator {
    size_t _handle;
} ObjectIterator;
typedef struct BucketIterator {
    size_t _handle;
} BucketIterator;

typedef struct Permission {
    bool allow_download;
    bool allow_upload;
    bool allow_list;
    bool allow_delete;

    // unix time in seconds when the permission becomes valid.
    // disabled when 0.
    int64_t not_before;
    // unix time in seconds when the permission becomes invalid.
    // disabled when 0.
    int64_t not_after;
} Permission;

typedef struct SharePrefix {
    char *bucket;
    // prefix is the prefix of the shared object keys.
    char *prefix;
} SharePrefix;

typedef struct Error {
    int32_t code;
    char *message;
} Error;

#define ERROR_INTERNAL 0x02
#define ERROR_CANCELED 0x03
#define ERROR_INVALID_HANDLE 0x04
#define ERROR_TOO_MANY_REQUESTS 0x05
#define ERROR_BANDWIDTH_LIMIT_EXCEEDED 0x06

#define ERROR_BUCKET_NAME_INVALID 0x10
#define ERROR_BUCKET_ALREADY_EXISTS 0x11
#define ERROR_BUCKET_NOT_EMPTY 0x12
#define ERROR_BUCKET_NOT_FOUND 0x13

#define ERROR_OBJECT_KEY_INVALID 0x20
#define ERROR_OBJECT_NOT_FOUND 0x21
#define ERROR_UPLOAD_DONE 0x22

typedef struct AccessResult {
    Access *access;
    Error *error;
} AccessResult;

typedef struct ProjectResult {
    Project *project;
    Error *error;
} ProjectResult;

typedef struct BucketResult {
    Bucket *bucket;
    Error *error;
} BucketResult;

typedef struct ObjectResult {
    Object *object;
    Error *error;
} ObjectResult;

typedef struct UploadResult {
    Upload *upload;
    Error *error;
} UploadResult;

typedef struct DownloadResult {
    Download *download;
    Error *error;
} DownloadResult;

typedef struct WriteResult {
    size_t bytes_written;
    Error *error;
} WriteResult;

typedef struct ReadResult {
    size_t bytes_read;
    Error *error;
} ReadResult;

typedef struct StringResult {
    char *string;
    Error *error;
} StringResult;
/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package storj.io/uplink-c */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h> /* for ptrdiff_t below */

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;




/* Start of preamble from import "C" comments.  */


#line 6 "access.go"
 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"

#line 6 "bucket.go"
 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"

#line 6 "buckets.go"
 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"

#line 6 "config.go"
 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"

#line 6 "download.go"
 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"

#line 6 "error.go"
 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"

#line 6 "main.go"
 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"

#line 6 "object.go"
 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"

#line 6 "objects.go"
 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"

#line 6 "project.go"
 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"

#line 6 "upload.go"
 #include "uplink_definitions.h"

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;

typedef float GoFloat32;
typedef double GoFloat64;



/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;

typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;



/* End of boilerplate cgo prologue.  */






// parse_access parses serialized access grant string.
extern AccessResult parse_access(char* accessString);

// request_access_with_passphrase requests satellite for a new access grant using a passhprase.
extern AccessResult request_access_with_passphrase(char* satellite_address, char* api_key, char* passphrase);

// access_serialize serializes access grant into a string.
extern StringResult access_serialize(Access* access);

// access_share creates new access grant with specific permission. Permission will be applied to prefixes when defined.
extern AccessResult access_share(Access* access, Permission permission, SharePrefix* prefixes, GoInt prefixes_count);

// free_string_result frees the resources associated with string result.
extern void free_string_result(StringResult result);

// free_access_result frees the resources associated with access grant.
extern void free_access_result(AccessResult result);

// stat_bucket returns information about a bucket.
extern BucketResult stat_bucket(Project* project, char* bucket_name);

// create_bucket creates a new bucket.
//
// When bucket already exists it returns a valid Bucket and ErrBucketExists.
extern BucketResult create_bucket(Project* project, char* bucket_name);

// ensure_bucket creates a new bucket and ignores the error when it already exists.
//
// When bucket already exists it returns a valid Bucket and ErrBucketExists.
extern BucketResult ensure_bucket(Project* project, char* bucket_name);

// delete_bucket deletes a bucket.
//
// When bucket is not empty it returns ErrBucketNotEmpty.
extern BucketResult delete_bucket(Project* project, char* bucket_name);

// free_bucket_result frees memory associated with the BucketResult.
extern void free_bucket_result(BucketResult result);

// free_bucket frees memory associated with the bucket.
extern void free_bucket(Bucket* bucket);

// list_buckets lists buckets
extern BucketIterator* list_buckets(Project* project, ListBucketsOptions* options);

// bucket_iterator_next prepares next Bucket for reading.
//
// It returns false if the end of the iteration is reached and there are no more buckets, or if there is an error.
extern _Bool bucket_iterator_next(BucketIterator* iterator);

// bucket_iterator_err returns error, if one happened during iteration.
extern Error* bucket_iterator_err(BucketIterator* iterator);

// bucket_iterator_item returns the current bucket in the iterator.
extern Bucket* bucket_iterator_item(BucketIterator* iterator);

// free_bucket_iterator frees memory associated with the BucketIterator.
extern void free_bucket_iterator(BucketIterator* iterator);

// config_request_access_with_passphrase requests satellite for a new access grant using a passhprase.
extern AccessResult config_request_access_with_passphrase(Config config, char* satellite_address, char* api_key, char* passphrase);

// config_open_project opens project using access grant.
extern ProjectResult config_open_project(Config config, Access* access);

// download_object starts  download to the specified key.
extern DownloadResult download_object(Project* project, char* bucket_name, char* object_key, DownloadOptions* options);

// download_read downloads from object's data stream into bytes up to length amount.
// It returns the number of bytes read (0 <= bytes_read <= length) and
// any error encountered that caused the read to stop early.
extern ReadResult download_read(Download* download, void* bytes, size_t length);

// download_info returns information about the downloaded object.
extern ObjectResult download_info(Download* download);

// free_read_result frees any resources associated with read result.
extern void free_read_result(ReadResult result);

// close_download closes the download.
extern Error* close_download(Download* download);

// free_download_result frees any associated resources.
extern void free_download_result(DownloadResult result);

// free_error frees error data.
extern void free_error(Error* err);

// internal_UniverseIsEmpty returns true if nothing is stored in the global map.
extern GoUint8 internal_UniverseIsEmpty();

// stat_object returns information about an object at the specific key.
extern ObjectResult stat_object(Project* project, char* bucket_name, char* object_key);

// delete_object deletes an object.
extern ObjectResult delete_object(Project* project, char* bucket_name, char* object_key);

// free_object_result frees memory associated with the ObjectResult.
extern void free_object_result(ObjectResult obj);

// free_object frees memory associated with the Object.
extern void free_object(Object* obj);

// list_objects lists objects
extern ObjectIterator* list_objects(Project* project, char* bucket_name, ListObjectsOptions* options);

// object_iterator_next prepares next Object for reading.
//
// It returns false if the end of the iteration is reached and there are no more objects, or if there is an error.
extern _Bool object_iterator_next(ObjectIterator* iterator);

// object_iterator_err returns error, if one happened during iteration.
extern Error* object_iterator_err(ObjectIterator* iterator);

// object_iterator_item returns the current object in the iterator.
extern Object* object_iterator_item(ObjectIterator* iterator);

// free_object_iterator frees memory associated with the ObjectIterator.
extern void free_object_iterator(ObjectIterator* iterator);

// open_project opens project using access grant.
extern ProjectResult open_project(Access* access);

// close_project closes the project.
extern Error* close_project(Project* project);

// free_project_result frees any associated resources.
extern void free_project_result(ProjectResult result);

// upload_object starts an upload to the specified key.
extern UploadResult upload_object(Project* project, char* bucket_name, char* object_key, UploadOptions* options);

// upload_write uploads len(p) bytes from p to the object's data stream.
// It returns the number of bytes written from p (0 <= n <= len(p)) and
// any error encountered that caused the write to stop early.
extern WriteResult upload_write(Upload* upload, void* bytes, size_t length);

// upload_commit commits the uploaded data.
extern Error* upload_commit(Upload* upload);

// upload_abort aborts an upload.
extern Error* upload_abort(Upload* upload);

// upload_info returns the last information about the uploaded object.
extern ObjectResult upload_info(Upload* upload);

// upload_set_custom_metadata returns the last information about the uploaded object.
extern Error* upload_set_custom_metadata(Upload* upload, CustomMetadata custom);

// free_write_result frees any resources associated with write result.
extern void free_write_result(WriteResult result);

// free_upload_result closes the upload and frees any associated resources.
extern void free_upload_result(UploadResult result);



